---
root(Type=CompilationUnit): 
    packageDeclaration(Type=PackageDeclaration): 
        name(Type=Name): 
            identifier: "examples"
            qualifier(Type=Name): 
                identifier: "org"
    imports: 
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Arrays"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
    types: 
        - type(Type=ClassOrInterfaceDeclaration): 
            isInterface: "false"
            name(Type=SimpleName): 
                identifier: "Main"
            comment(Type=JavadocComment): 
                content: "\n * This is a sample class to demonstrate the tokenization process.\n "
            members: 
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "GREATER"
                                    left(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "length"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "args"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "0"
                                elseStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "println"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "out"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "System"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "Hello world from Java!"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "println"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "out"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "System"
                                                arguments: 
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=StringLiteralExpr): 
                                                            value: "Program arguments: "
                                                        right(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "toString"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Arrays"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "args"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "main"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "args"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "String"
            modifiers: 
                - modifier(Type=Modifier): 
                    keyword: "PUBLIC"
...